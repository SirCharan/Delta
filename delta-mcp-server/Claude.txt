DELTA EXCHANGE API INTEGRATION GUIDE FOR CLAUDE
==============================================

EXECUTIVE SUMMARY
-----------------
✅ SUCCESSFUL ORDER EXECUTION CONFIRMED
Order ID: 524735394 was successfully placed on Delta Exchange
- Product: ETHUSD Perpetual (Product ID: 3136)
- Side: BUY
- Size: 1 contract
- Limit Price: $1000
- Status: OPEN and waiting for execution

CRITICAL VERIFIED INFORMATION
-----------------------------

1. API CREDENTIALS STATUS: ✅ WORKING
   - API Key: OIG5ggif59gm7ZHJjquBA7cIZF0At7
   - API Secret: idFFiuukXBfi5SdYne4nHx1mntfbV60YL9UU9SOSmpJwpgErGYgigNDD5XQO
   - Base URL: https://api.india.delta.exchange
   - Authentication: HMAC-SHA256 signature required for private endpoints

2. PRODUCT ID VERIFICATION: ✅ CONFIRMED
   - ETHUSD Perpetual Product ID: 3136
   - Symbol: "ETHUSD"
   - Description: "Ethereum Perpetual futures, quoted, settled & margined in US Dollar"
   - Located at index 1002 in the products list (out of 1004 total products)

DELTA EXCHANGE API RESPONSE STRUCTURE
------------------------------------

CRITICAL: Delta Exchange API responses follow this structure:
```json
{
  "meta": {},
  "result": [actual_data_here],
  "success": true
}
```

❌ COMMON MISTAKE: Expecting response.json() to be the data directly
✅ CORRECT APPROACH: Access data via response.json()['result']

Example for /v2/products endpoint:
```python
response = requests.get(f"{BASE_URL}/v2/products")
data = response.json()
products = data['result']  # This is the actual list of products
```

PROPER ERROR HANDLING FOR API RESPONSES
--------------------------------------

1. Always check response structure:
```python
def handle_api_response(response):
    if response.status_code == 200:
        try:
            data = response.json()
            
            # Verify response structure
            if not isinstance(data, dict):
                raise ValueError(f"Expected dict, got {type(data)}")
            
            if 'result' not in data:
                raise ValueError(f"No 'result' key. Available: {list(data.keys())}")
            
            return data['result']
            
        except json.JSONDecodeError as e:
            raise ValueError(f"Invalid JSON: {e}")
    else:
        raise ValueError(f"API error {response.status_code}: {response.text}")
```

2. Type checking for nested data:
```python
# When iterating through products
for product in products:
    if isinstance(product, dict) and product.get('id') == target_id:
        return product
```

AUTHENTICATION & SIGNATURE GENERATION
------------------------------------

Delta Exchange requires HMAC-SHA256 signatures for private endpoints:

```python
def generate_signature(method, endpoint, query_string="", payload=""):
    timestamp = str(int(time.time()))
    signature_data = method + timestamp + endpoint + query_string + payload
    signature = hmac.new(
        API_SECRET.encode('utf-8'),
        signature_data.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()
    return signature, timestamp

# Required headers for authenticated requests
headers = {
    'api-key': API_KEY,
    'signature': signature,
    'timestamp': timestamp,
    'Content-Type': 'application/json',
    'User-Agent': 'python-3.10'
}
```

ORDER PLACEMENT - WORKING EXAMPLE
---------------------------------

This exact code successfully placed Order ID 524735394:

```python
def place_ethusd_order():
    # Order parameters that WORK
    order_data = {
        "product_id": 3136,  # ETHUSD perpetual - VERIFIED
        "side": "buy",
        "size": "1",
        "order_type": "limit_order",
        "time_in_force": "gtc",
        "limit_price": "1000"
    }
    
    endpoint = "/v2/orders"
    payload = json.dumps(order_data, separators=(',', ':'))
    signature, timestamp = generate_signature("POST", endpoint, "", payload)
    
    headers = {
        'api-key': API_KEY,
        'signature': signature,
        'timestamp': timestamp,
        'Content-Type': 'application/json',
        'User-Agent': 'python-3.10'
    }
    
    response = requests.post(
        f"{BASE_URL}{endpoint}",
        headers=headers,
        data=payload,
        timeout=30
    )
    
    # Handle response (follows same structure)
    if response.status_code == 200:
        result = response.json()
        order = result['result']  # Actual order data is here
        return order
```

SUCCESSFUL ORDER RESPONSE STRUCTURE
----------------------------------

When an order is successfully placed, the response contains:
```json
{
  "meta": {},
  "result": {
    "id": 524735394,
    "state": "open",
    "side": "buy",
    "size": 1,
    "limit_price": "1000",
    "product_id": 3136,
    "product_symbol": "ETHUSD",
    "order_type": "limit_order",
    "time_in_force": "gtc",
    "created_at": "2025-05-26T07:19:28.577409Z",
    "unfilled_size": 1,
    "user_id": 89580117,
    // ... other fields
  },
  "success": true
}
```

VERIFICATION WORKFLOW
--------------------

Before placing orders, always verify:

1. API Connection:
```python
def verify_credentials():
    response = requests.get(f"{BASE_URL}/v2/products", timeout=10)
    if response.status_code == 200:
        data = response.json()
        products = data['result']
        return len(products) > 0
    return False
```

2. Product Existence:
```python
def find_product(product_id):
    response = requests.get(f"{BASE_URL}/v2/products", timeout=10)
    data = response.json()
    products = data['result']
    
    for product in products:
        if isinstance(product, dict) and product.get('id') == product_id:
            return product
    return None
```

COMMON PITFALLS TO AVOID
-----------------------

1. ❌ Expecting direct list from API response
   ✅ Always access via ['result'] key

2. ❌ Not checking data types before calling .get()
   ✅ Use isinstance() checks

3. ❌ Hardcoding product IDs without verification
   ✅ Always verify product exists in API response

4. ❌ Missing proper error handling for JSON parsing
   ✅ Use try-catch for json.JSONDecodeError

5. ❌ Not handling API rate limits or timeouts
   ✅ Use appropriate timeout values and retry logic

TESTED ENDPOINTS
---------------

✅ GET /v2/products - Public endpoint, no auth required
   Returns: {"meta": {}, "result": [products], "success": true}

✅ POST /v2/orders - Private endpoint, requires authentication
   Returns: {"meta": {}, "result": {order_details}, "success": true}

ENVIRONMENT SETUP
----------------

Required packages:
- requests
- python-dotenv
- hashlib (built-in)
- hmac (built-in)
- json (built-in)
- time (built-in)

Environment variables (.env file):
```
DELTA_API_KEY=OIG5ggif59gm7ZHJjquBA7cIZF0At7
DELTA_API_SECRET=idFFiuukXBfi5SdYne4nHx1mntfbV60YL9UU9SOSmpJwpgErGYgigNDD5XQO
```

FINAL NOTES
----------

This document is based on ACTUAL SUCCESSFUL EXECUTION of Order ID 524735394 on Delta Exchange.
All information has been verified through live API calls and successful order placement.

The key breakthrough was understanding that Delta Exchange API responses are wrapped in a 
{"meta": {}, "result": data, "success": bool} structure, not returned as direct data.

Date: 2025-05-26
Status: PRODUCTION READY
Last Successful Order: 524735394 (ETHUSD BUY 1 @ $1000) 